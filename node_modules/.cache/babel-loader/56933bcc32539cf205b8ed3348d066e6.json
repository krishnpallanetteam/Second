{"ast":null,"code":"import { MODEL_A_TOGGLE, MODEL_A_CHECKBOX_STATUS_TOGGLE, MODEL_A_ALL_COUNTRY_DATA, MODEL_B_TOGGLE, MODEL_B_US_COUNTRY_DATA, MODEL_B_CHECKBOX_STATUS_TOGGLE, MODEL_C_TOGGLE } from './actionTypes';\nimport { axiosInstance } from '../api/axiosConfig';\nexport const modelAToggle = status => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: MODEL_A_TOGGLE,\n      payload: {\n        status\n      }\n    });\n  };\n};\nexport const modelACheckBoxToggle = status => {\n  return dispatch => {\n    dispatch({\n      type: MODEL_A_CHECKBOX_STATUS_TOGGLE,\n      payload: {\n        status\n      }\n    });\n  };\n};\nexport const getAllCountryContacts = (page = 1, loadMore = false, countryId = null, params = null) => {\n  return async (dispatch, getState) => {\n    let queryObj = {\n      companyId: 171,\n      page\n    };\n    if (countryId) queryObj.countryId = countryId;\n\n    if (params && Object.keys(params).length) {\n      queryObj.query = {};\n      if (params.names) queryObj.query.names = params.names;else if (params.number) queryObj.query.number = params.number;\n    }\n\n    try {\n      const response = await axiosInstance({\n        method: 'get',\n        params: queryObj\n      });\n\n      if (response.status === 200) {\n        let data = response.data;\n        let contactList = [];\n\n        if (countryId) {\n          if (loadMore) {\n            let allState = getState();\n            let list = allState.model.modelB.usCountryList;\n            contactList = list;\n          }\n\n          data.contacts_ids.forEach(item => {\n            contactList.push(data.contacts[item]);\n          });\n          dispatch({\n            type: MODEL_B_US_COUNTRY_DATA,\n            payload: {\n              contactList\n            }\n          });\n          return response.data;\n        } else {\n          if (loadMore) {\n            let allState = getState();\n            let list = allState.model.modelA.allCountryList;\n            contactList = list;\n          }\n\n          data.contacts_ids.forEach(item => {\n            contactList.push(data.contacts[item]);\n          });\n          dispatch({\n            type: MODEL_A_ALL_COUNTRY_DATA,\n            payload: {\n              contactList\n            }\n          });\n          return response.data;\n        }\n      } else if (response.status === 404) {\n        return response;\n      } else if (response.status === 500) {\n        return response;\n      }\n    } catch (error) {\n      return error;\n    }\n  };\n};\nexport const modelBToggle = status => {\n  return dispatch => {\n    dispatch({\n      type: MODEL_B_TOGGLE,\n      payload: {\n        status\n      }\n    });\n  };\n};\nexport const modelBCheckBoxToggle = status => {\n  return dispatch => {\n    dispatch({\n      type: MODEL_B_CHECKBOX_STATUS_TOGGLE,\n      payload: {\n        status\n      }\n    });\n  };\n};\nexport const modelCToggle = (status, item = null) => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: MODEL_C_TOGGLE,\n      payload: {\n        status,\n        item\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/ulcom/Desktop/CommunityReact/src/action/modelAction.js"],"names":["MODEL_A_TOGGLE","MODEL_A_CHECKBOX_STATUS_TOGGLE","MODEL_A_ALL_COUNTRY_DATA","MODEL_B_TOGGLE","MODEL_B_US_COUNTRY_DATA","MODEL_B_CHECKBOX_STATUS_TOGGLE","MODEL_C_TOGGLE","axiosInstance","modelAToggle","status","dispatch","getState","type","payload","modelACheckBoxToggle","getAllCountryContacts","page","loadMore","countryId","params","queryObj","companyId","Object","keys","length","query","names","number","response","method","data","contactList","allState","list","model","modelB","usCountryList","contacts_ids","forEach","item","push","contacts","modelA","allCountryList","error","modelBToggle","modelBCheckBoxToggle","modelCToggle"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,8BAAzB,EAAyDC,wBAAzD,EAAmFC,cAAnF,EAAmGC,uBAAnG,EAA4HC,8BAA5H,EAA4JC,cAA5J,QAAkL,eAAlL;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,OAAO,MAAMC,YAAY,GAAGC,MAAM,IAAI;AAClC,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEZ,cADD;AAELa,MAAAA,OAAO,EAAE;AAAEJ,QAAAA;AAAF;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH,CAPM;AASP,OAAO,MAAMK,oBAAoB,GAAGL,MAAM,IAAI;AAC1C,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEX,8BADD;AAELY,MAAAA,OAAO,EAAE;AAAEJ,QAAAA;AAAF;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH,CAPM;AASP,OAAO,MAAMM,qBAAqB,GAAG,CAACC,IAAI,GAAG,CAAR,EAAWC,QAAQ,GAAG,KAAtB,EAA6BC,SAAS,GAAG,IAAzC,EAA+CC,MAAM,GAAG,IAAxD,KAAiE;AAClG,SAAO,OAAOT,QAAP,EAAiBC,QAAjB,KAA8B;AACjC,QAAIS,QAAQ,GAAG;AACXC,MAAAA,SAAS,EAAE,GADA;AAEXL,MAAAA;AAFW,KAAf;AAIA,QAAIE,SAAJ,EAAeE,QAAQ,CAACF,SAAT,GAAqBA,SAArB;;AACf,QAAIC,MAAM,IAAIG,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,MAAlC,EAA0C;AACtCJ,MAAAA,QAAQ,CAACK,KAAT,GAAiB,EAAjB;AACA,UAAIN,MAAM,CAACO,KAAX,EAAkBN,QAAQ,CAACK,KAAT,CAAeC,KAAf,GAAuBP,MAAM,CAACO,KAA9B,CAAlB,KACK,IAAIP,MAAM,CAACQ,MAAX,EAAmBP,QAAQ,CAACK,KAAT,CAAeE,MAAf,GAAwBR,MAAM,CAACQ,MAA/B;AAC3B;;AACD,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMrB,aAAa,CAAC;AACjCsB,QAAAA,MAAM,EAAE,KADyB;AAEjCV,QAAAA,MAAM,EAAEC;AAFyB,OAAD,CAApC;;AAIA,UAAIQ,QAAQ,CAACnB,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAIqB,IAAI,GAAGF,QAAQ,CAACE,IAApB;AACA,YAAIC,WAAW,GAAG,EAAlB;;AACA,YAAIb,SAAJ,EAAe;AACX,cAAID,QAAJ,EAAc;AACV,gBAAIe,QAAQ,GAAGrB,QAAQ,EAAvB;AACA,gBAAIsB,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAeC,MAAf,CAAsBC,aAAjC;AACAL,YAAAA,WAAW,GAAGE,IAAd;AACH;;AACDH,UAAAA,IAAI,CAACO,YAAL,CAAkBC,OAAlB,CAA0BC,IAAI,IAAI;AAC9BR,YAAAA,WAAW,CAACS,IAAZ,CAAiBV,IAAI,CAACW,QAAL,CAAcF,IAAd,CAAjB;AACH,WAFD;AAGA7B,UAAAA,QAAQ,CAAC;AACLE,YAAAA,IAAI,EAAER,uBADD;AAELS,YAAAA,OAAO,EAAE;AAAEkB,cAAAA;AAAF;AAFJ,WAAD,CAAR;AAIA,iBAAOH,QAAQ,CAACE,IAAhB;AACH,SAdD,MAcO;AACH,cAAIb,QAAJ,EAAc;AACV,gBAAIe,QAAQ,GAAGrB,QAAQ,EAAvB;AACA,gBAAIsB,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAeQ,MAAf,CAAsBC,cAAjC;AACAZ,YAAAA,WAAW,GAAGE,IAAd;AACH;;AACDH,UAAAA,IAAI,CAACO,YAAL,CAAkBC,OAAlB,CAA0BC,IAAI,IAAI;AAC9BR,YAAAA,WAAW,CAACS,IAAZ,CAAiBV,IAAI,CAACW,QAAL,CAAcF,IAAd,CAAjB;AACH,WAFD;AAGA7B,UAAAA,QAAQ,CAAC;AACLE,YAAAA,IAAI,EAAEV,wBADD;AAELW,YAAAA,OAAO,EAAE;AAAEkB,cAAAA;AAAF;AAFJ,WAAD,CAAR;AAIA,iBAAOH,QAAQ,CAACE,IAAhB;AACH;AACJ,OAhCD,MAgCO,IAAIF,QAAQ,CAACnB,MAAT,KAAoB,GAAxB,EAA6B;AAChC,eAAOmB,QAAP;AACH,OAFM,MAEA,IAAIA,QAAQ,CAACnB,MAAT,KAAoB,GAAxB,EAA6B;AAChC,eAAOmB,QAAP;AACH;AACJ,KA1CD,CA0CE,OAAOgB,KAAP,EAAc;AACZ,aAAOA,KAAP;AACH;AACJ,GAxDD;AAyDH,CA1DM;AA4DP,OAAO,MAAMC,YAAY,GAAGpC,MAAM,IAAI;AAClC,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET,cADD;AAELU,MAAAA,OAAO,EAAE;AAAEJ,QAAAA;AAAF;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH,CAPM;AASP,OAAO,MAAMqC,oBAAoB,GAAGrC,MAAM,IAAI;AAC1C,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEP,8BADD;AAELQ,MAAAA,OAAO,EAAE;AAAEJ,QAAAA;AAAF;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH,CAPM;AASP,OAAO,MAAMsC,YAAY,GAAG,CAACtC,MAAD,EAAS8B,IAAI,GAAG,IAAhB,KAAyB;AACjD,SAAO,CAAC7B,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEN,cADD;AAELO,MAAAA,OAAO,EAAE;AAAEJ,QAAAA,MAAF;AAAU8B,QAAAA;AAAV;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH,CAPM","sourcesContent":["import { MODEL_A_TOGGLE, MODEL_A_CHECKBOX_STATUS_TOGGLE, MODEL_A_ALL_COUNTRY_DATA, MODEL_B_TOGGLE, MODEL_B_US_COUNTRY_DATA, MODEL_B_CHECKBOX_STATUS_TOGGLE, MODEL_C_TOGGLE } from './actionTypes';\nimport { axiosInstance } from '../api/axiosConfig';\n\nexport const modelAToggle = status => {\n    return (dispatch, getState) => {\n        dispatch({\n            type: MODEL_A_TOGGLE,\n            payload: { status }\n        });\n    };\n}\n\nexport const modelACheckBoxToggle = status => {\n    return (dispatch) => {\n        dispatch({\n            type: MODEL_A_CHECKBOX_STATUS_TOGGLE,\n            payload: { status }\n        });\n    };\n}\n\nexport const getAllCountryContacts = (page = 1, loadMore = false, countryId = null, params = null) => {\n    return async (dispatch, getState) => {\n        let queryObj = {\n            companyId: 171,\n            page\n        };\n        if (countryId) queryObj.countryId = countryId;\n        if (params && Object.keys(params).length) {\n            queryObj.query = {};\n            if (params.names) queryObj.query.names = params.names;\n            else if (params.number) queryObj.query.number = params.number;\n        }\n        try {\n            const response = await axiosInstance({\n                method: 'get',\n                params: queryObj\n            });\n            if (response.status === 200) {\n                let data = response.data;\n                let contactList = [];\n                if (countryId) {\n                    if (loadMore) {\n                        let allState = getState();\n                        let list = allState.model.modelB.usCountryList;\n                        contactList = list;\n                    }\n                    data.contacts_ids.forEach(item => {\n                        contactList.push(data.contacts[item]);\n                    });\n                    dispatch({\n                        type: MODEL_B_US_COUNTRY_DATA,\n                        payload: { contactList }\n                    });\n                    return response.data;\n                } else {\n                    if (loadMore) {\n                        let allState = getState();\n                        let list = allState.model.modelA.allCountryList;\n                        contactList = list;\n                    }\n                    data.contacts_ids.forEach(item => {\n                        contactList.push(data.contacts[item]);\n                    });\n                    dispatch({\n                        type: MODEL_A_ALL_COUNTRY_DATA,\n                        payload: { contactList }\n                    });\n                    return response.data;\n                }\n            } else if (response.status === 404) {\n                return response;\n            } else if (response.status === 500) {\n                return response;\n            }\n        } catch (error) {\n            return error\n        }\n    };\n};\n\nexport const modelBToggle = status => {\n    return (dispatch) => {\n        dispatch({\n            type: MODEL_B_TOGGLE,\n            payload: { status }\n        });\n    };\n}\n\nexport const modelBCheckBoxToggle = status => {\n    return (dispatch) => {\n        dispatch({\n            type: MODEL_B_CHECKBOX_STATUS_TOGGLE,\n            payload: { status }\n        });\n    };\n}\n\nexport const modelCToggle = (status, item = null) => {\n    return (dispatch, getState) => {\n        dispatch({\n            type: MODEL_C_TOGGLE,\n            payload: { status, item }\n        });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}